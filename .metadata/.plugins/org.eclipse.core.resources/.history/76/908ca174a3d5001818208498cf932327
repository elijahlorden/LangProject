package main;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Scanner;

public class Util {
	
	public static ArrayList<String> readFile(String path) throws IOException {
		ArrayList<String> lines = new ArrayList<String>();
		String data;
		FileInputStream in = new FileInputStream(new File(path));
		BufferedReader reader = new BufferedReader(new InputStreamReader(in));
		while ((data = reader.readLine()) != null) {
			lines.add(data);
		}
		reader.close();
		return lines;
	}
	
	public static void error(String s1, String s2) {
		System.out.println("[" + s1 + "] " + s2);
		Scanner s = new Scanner(System.in);
		s.nextByte();
		s.close();
		System.exit(0);
	}
	
	public static void error(String s1,String s2, int line) {
		System.out.println("[" + s1 + "] (line "+ line + ") " + s2);
		Scanner s = new Scanner(System.in);
		s.nextByte();
		s.close();
		System.exit(0);
	}
	
	public static void printArray(byte[] array) {
		for (int i=0;i<array.length;i++) {
			System.out.println(array[i]);
		}
	}
	
	public static <T> T concatArrays(T a, T b) {
	    if (!a.getClass().isArray() || !b.getClass().isArray()) {
	        throw new IllegalArgumentException();
	    }

	    Class<?> resCompType;
	    Class<?> aCompType = a.getClass().getComponentType();
	    Class<?> bCompType = b.getClass().getComponentType();

	    if (aCompType.isAssignableFrom(bCompType)) {
	        resCompType = aCompType;
	    } else if (bCompType.isAssignableFrom(aCompType)) {
	        resCompType = bCompType;
	    } else {
	        throw new IllegalArgumentException();
	    }

	    int aLen = Array.getLength(a);
	    int bLen = Array.getLength(b);

	    @SuppressWarnings("unchecked")
	    T result = (T) Array.newInstance(resCompType, aLen + bLen);
	    System.arraycopy(a, 0, result, 0, aLen);
	    System.arraycopy(b, 0, result, aLen, bLen);        

	    return result;
	}
	
	
	
	
	
	
	
}
